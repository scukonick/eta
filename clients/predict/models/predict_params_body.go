// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PredictParamsBody predict params body
// swagger:model predictParamsBody
type PredictParamsBody struct {

	// source
	// Required: true
	Source []Position `json:"source"`

	// target
	// Required: true
	Target Position `json:"target"`
}

// Validate validates this predict params body
func (m *PredictParamsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PredictParamsBody) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	for i := 0; i < len(m.Source); i++ {

		if err := m.Source[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PredictParamsBody) validateTarget(formats strfmt.Registry) error {

	if err := m.Target.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("target")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PredictParamsBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PredictParamsBody) UnmarshalBinary(b []byte) error {
	var res PredictParamsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
